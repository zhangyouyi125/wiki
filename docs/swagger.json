{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.",
    "title": "ORY Hydra",
    "version": "latest"
  },
  "basePath": "/",
  "paths": {
    "/.well-known/jwks.json": {
      "get": {
        "description": "This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and,\nif enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like\n[node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "JSON Web Keys Discovery",
        "operationId": "wellKnown",
        "responses": {
          "200": {
            "description": "JSONWebKeySet",
            "schema": {
              "$ref": "#/definitions/JSONWebKeySet"
            }
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "description": "The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll\nyour own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this\nflow at https://openid.net/specs/openid-connect-discovery-1_0.html .\n\nPopular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others.\nFor a full list of clients go here: https://openid.net/developers/certified/",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "OpenID Connect Discovery",
        "operationId": "discoverOpenIDConfiguration",
        "responses": {
          "200": {
            "$ref": "#/responses/wellKnown"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/clients": {
      "get": {
        "description": "This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.\nThe \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '\u003chttps://hydra-url/admin/clients?limit={limit}\u0026offset={offset}\u003e; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.\nMultiple links can be included in this header, and will be separated by a comma.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "List OAuth 2.0 Clients",
        "operationId": "listOAuth2Clients",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name of the clients to filter by.",
            "name": "client_name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Owner",
            "description": "The owner of the clients to filter by.",
            "name": "owner",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ClientId",
            "name": "client_id",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Tag",
            "name": "tag",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Metadata",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/oAuth2ClientList"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "post": {
        "description": "Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create an OAuth 2.0 Client",
        "operationId": "createOAuth2Client",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "409": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/clients/{id}": {
      "get": {
        "description": "Get an OAUth 2.0 client by its ID. This endpoint never returns passwords.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get an OAuth 2.0 Client.",
        "operationId": "getOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "The id of the OAuth 2.0 Client.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "put": {
        "description": "Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Update an OAuth 2.0 Client",
        "operationId": "updateOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "delete": {
        "description": "Delete an existing OAuth 2.0 Client by its ID.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Deletes an OAuth 2.0 Client",
        "operationId": "deleteOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "The id of the OAuth 2.0 Client.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "patch": {
        "description": "Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Patch an OAuth 2.0 Client",
        "operationId": "patchOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/health/alive": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running.\nThis status does currently not include checks whether the database connection is working.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Check Alive Status",
        "operationId": "isInstanceAlive",
        "responses": {
          "200": {
            "$ref": "#/responses/healthStatus"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "public"
        ],
        "summary": "Check Readiness Status",
        "operationId": "isInstanceReady",
        "responses": {
          "200": {
            "$ref": "#/responses/healthStatus"
          },
          "503": {
            "$ref": "#/responses/healthNotReadyStatus"
          }
        }
      }
    },
    "/keys/{set}": {
      "get": {
        "description": "This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Retrieve a JSON Web Key Set",
        "operationId": "getJsonWebKeySet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Set",
            "description": "The set",
            "name": "set",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSONWebKeySet",
            "schema": {
              "$ref": "#/definitions/JSONWebKeySet"
            }
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "403": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "put": {
        "description": "Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Update a JSON Web Key Set",
        "operationId": "updateJsonWebKeySet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Set",
            "description": "The set",
            "name": "set",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JSONWebKeySet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSONWebKeySet",
            "schema": {
              "$ref": "#/definitions/JSONWebKeySet"
            }
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "403": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "post": {
        "description": "This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Generate a New JSON Web Key",
        "operationId": "createJsonWebKeySet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Set",
            "description": "The set",
            "name": "set",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/jsonWebKeySetGeneratorRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "JSONWebKeySet",
            "schema": {
              "$ref": "#/definitions/JSONWebKeySet"
            }
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "403": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "delete": {
        "description": "Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete a JSON Web Key Set",
        "operationId": "deleteJsonWebKeySet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Set",
            "description": "The set",
            "name": "set",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "403": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/keys/{set}/{kid}": {
      "get": {
        "description": "This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Fetch a JSON Web Key",
        "operationId": "getJsonWebKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "KID",
            "description": "The kid of the desired key",
            "name": "kid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Set",
            "description": "The set",
            "name": "set",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "JSONWebKeySet",
            "schema": {
              "$ref": "#/definitions/JSONWebKeySet"
            }
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "put": {
        "description": "Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Update a JSON Web Key",
        "operationId": "updateJsonWebKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "KID",
            "description": "The kid of the desired key",
            "name": "kid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Set",
            "description": "The set",
            "name": "set",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JSONWebKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSONWebKey",
            "schema": {
              "$ref": "#/definitions/JSONWebKey"
            }
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "403": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "delete": {
        "description": "Use this endpoint to delete a single JSON Web Key.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete a JSON Web Key",
        "operationId": "deleteJsonWebKey",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "KID",
            "description": "The kid of the desired key",
            "name": "kid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Set",
            "description": "The set",
            "name": "set",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "403": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/metrics/prometheus": {
      "get": {
        "description": "```\nmetadata:\nannotations:\nprometheus.io/port: \"4434\"\nprometheus.io/path: \"/metrics/prometheus\"\n```",
        "produces": [
          "plain/text"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Get snapshot metrics from the service. If you're using k8s, you can then add annotations to\nyour deployment like so:",
        "operationId": "prometheus",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          }
        }
      }
    },
    "/oauth2/auth": {
      "get": {
        "description": "This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows.\nOAuth2 is a very popular protocol and a library for your programming language will exists.\n\nTo learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "The OAuth 2.0 Authorize Endpoint",
        "operationId": "oauthAuth",
        "responses": {
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/consent": {
      "get": {
        "description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\nto authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\nthe OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\nThe consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\ngrant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\nThe consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\nprovider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\nor rejected the request.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get Consent Request Information",
        "operationId": "getConsentRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "consent_challenge",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "consentRequest",
            "schema": {
              "$ref": "#/definitions/consentRequest"
            }
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "410": {
            "$ref": "#/responses/requestWasHandledResponse"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/consent/accept": {
      "put": {
        "description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\nto authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\nthe OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\nThe consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\ngrant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\nThe consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\nprovider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\nor rejected the request.\n\nThis endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf.\nThe consent provider includes additional information, such as session data for access and ID tokens, and if the\nconsent request should be used as basis for future requests.\n\nThe response contains a redirect URL which the consent provider should redirect the user-agent to.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Accept a Consent Request",
        "operationId": "acceptConsentRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "consent_challenge",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/acceptConsentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/completedRequest"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/consent/reject": {
      "put": {
        "description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\nto authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\nthe OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\nThe consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\ngrant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\nThe consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\nprovider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\nor rejected the request.\n\nThis endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf.\nThe consent provider must include a reason why the consent was not granted.\n\nThe response contains a redirect URL which the consent provider should redirect the user-agent to.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Reject a Consent Request",
        "operationId": "rejectConsentRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "consent_challenge",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/rejectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/completedRequest"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/login": {
      "get": {
        "description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n(sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\nprovider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\na subject (in OAuth2 the proper name for subject is \"resource owner\").\n\nThe authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\nprovider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get a Login Request",
        "operationId": "getLoginRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "login_challenge",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/loginRequest"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "410": {
            "$ref": "#/responses/requestWasHandledResponse"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/login/accept": {
      "put": {
        "description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n(sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\nprovider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\na subject (in OAuth2 the proper name for subject is \"resource owner\").\n\nThe authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\nprovider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.\n\nThis endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as\nthe subject's ID and if ORY Hydra should remember the subject's subject agent for future authentication attempts by setting\na cookie.\n\nThe response contains a redirect URL which the login provider should redirect the user-agent to.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Accept a Login Request",
        "operationId": "acceptLoginRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "login_challenge",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/acceptLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/completedRequest"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/login/reject": {
      "put": {
        "description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n(sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\nprovider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\na subject (in OAuth2 the proper name for subject is \"resource owner\").\n\nThe authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\nprovider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.\n\nThis endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication\nwas be denied.\n\nThe response contains a redirect URL which the login provider should redirect the user-agent to.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Reject a Login Request",
        "operationId": "rejectLoginRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "login_challenge",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/rejectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/completedRequest"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/logout": {
      "get": {
        "description": "Use this endpoint to fetch a logout request.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get a Logout Request",
        "operationId": "getLogoutRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "logout_challenge",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/logoutRequest"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "410": {
            "$ref": "#/responses/requestWasHandledResponse"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/logout/accept": {
      "put": {
        "description": "When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.\nNo body is required.\n\nThe response contains a redirect URL which the consent provider should redirect the user-agent to.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Accept a Logout Request",
        "operationId": "acceptLogoutRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "logout_challenge",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/completedRequest"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/requests/logout/reject": {
      "put": {
        "description": "When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request.\nNo body is required.\n\nThe response is empty as the logout provider has to chose what action to perform next.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Reject a Logout Request",
        "operationId": "rejectLogoutRequest",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Challenge",
            "name": "logout_challenge",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/rejectRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/sessions/consent": {
      "get": {
        "description": "This endpoint lists all subject's granted consent sessions, including client and granted scope.\nIf the subject is unknown or has not granted any consent sessions yet, the endpoint returns an\nempty JSON array with status code 200 OK.\n\n\nThe \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '\u003chttps://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}\u0026limit={limit}\u0026offset={offset}\u003e; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.\nMultiple links can be included in this header, and will be separated by a comma.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Lists All Consent Sessions of a Subject",
        "operationId": "listSubjectConsentSessions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Subject",
            "name": "subject",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/handledConsentRequestList"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "delete": {
        "description": "This endpoint revokes a subject's granted consent sessions for a specific OAuth 2.0 Client and invalidates all\nassociated OAuth 2.0 Access Tokens.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client",
        "operationId": "revokeConsentSessions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Subject",
            "description": "The subject (Subject) who's consent sessions should be deleted.",
            "name": "subject",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Client",
            "description": "If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID",
            "name": "client",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "All",
            "description": "If set to `?all=true`, deletes all consent sessions by the Subject that have been granted.",
            "name": "all",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/auth/sessions/login": {
      "delete": {
        "description": "This endpoint invalidates a subject's authentication session. After revoking the authentication session, the subject\nhas to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect\nFront- or Back-channel logout.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Invalidates All Login Sessions of a Certain User\nInvalidates a Subject's Authentication Session",
        "operationId": "revokeAuthenticationSession",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Subject",
            "name": "subject",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/flush": {
      "post": {
        "description": "This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be\nnot be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted\nautomatically when performing the refresh flow.",
        "consumes": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Flush Expired OAuth2 Access Tokens",
        "operationId": "flushInactiveOAuth2Tokens",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/flushInactiveOAuth2TokensRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/introspect": {
      "post": {
        "description": "The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token\nis neither expired nor revoked. If a token is active, additional information on the token will be included. You can\nset additional data for a token by setting `accessTokenExtra` during the consent flow.\n\nFor more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/).",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Introspect OAuth2 Tokens",
        "operationId": "introspectOAuth2Token",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Token",
            "description": "The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint\ndefined in OAuth 2.0. For refresh tokens, this is the \"refresh_token\"\nvalue returned.",
            "name": "token",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Scope",
            "description": "An optional, space separated list of required scopes. If the access token was not granted one of the\nscopes, the result of active will be false.",
            "name": "scope",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/oAuth2TokenIntrospection"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/revoke": {
      "post": {
        "security": [
          {
            "basic": []
          },
          {
            "oauth2": []
          }
        ],
        "description": "Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no\nlonger be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token.\nRevoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by\nthe client the token was generated for.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "Revoke OAuth2 Tokens",
        "operationId": "revokeOAuth2Token",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Token",
            "name": "token",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/sessions/logout": {
      "get": {
        "description": "This endpoint initiates and completes user logout at ORY Hydra and initiates OpenID Connect Front-/Back-channel logout:\n\nhttps://openid.net/specs/openid-connect-frontchannel-1_0.html\nhttps://openid.net/specs/openid-connect-backchannel-1_0.html",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "OpenID Connect Front-Backchannel Enabled Logout",
        "operationId": "disconnectUser",
        "responses": {
          "302": {
            "$ref": "#/responses/emptyResponse"
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "security": [
          {
            "basic": []
          },
          {
            "oauth2": []
          }
        ],
        "description": "The client makes a request to the token endpoint by sending the\nfollowing parameters using the \"application/x-www-form-urlencoded\" HTTP\nrequest entity-body.\n\n\u003e Do not implement a client for this endpoint yourself. Use a library. There are many libraries\n\u003e available for any programming language. You can find a list of libraries here: https://oauth.net/code/\n\u003e\n\u003e Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "The OAuth 2.0 Token Endpoint",
        "operationId": "oauth2Token",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "GrantType",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Code",
            "name": "code",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "RefreshToken",
            "name": "refresh_token",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "RedirectURI",
            "name": "redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "x-go-name": "ClientID",
            "name": "client_id",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/oauth2TokenResponse"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/oauth2/tokens": {
      "delete": {
        "description": "This endpoint deletes OAuth2 access tokens issued for a client from the database",
        "consumes": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Delete OAuth2 Access Tokens from a Client",
        "operationId": "deleteOAuth2Token",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClientID",
            "name": "client_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/subscriptions": {
      "post": {
        "description": "Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "subscription"
        ],
        "summary": "Create an data",
        "operationId": "createdatasubscription",
        "responses": {
          "201": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "409": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/userinfo": {
      "get": {
        "security": [
          {
            "oauth2": []
          }
        ],
        "description": "This endpoint returns the payload of the ID Token, including the idTokenExtra values, of\nthe provided OAuth 2.0 Access Token.\n\nFor more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).\n\nIn the case of authentication error, a WWW-Authenticate header might be set in the response\nwith more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3)\nfor more details about header format.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "public"
        ],
        "summary": "OpenID Connect Userinfo",
        "operationId": "userinfo",
        "responses": {
          "200": {
            "$ref": "#/responses/userinfoResponse"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This endpoint returns the service version typically notated using semantic versioning.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get Service Version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/version"
          }
        }
      }
    }
  },
  "definitions": {
    "JSONRawMessage": {
      "type": "object",
      "title": "JSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger.",
      "x-go-package": "github.com/ory/x/sqlxx"
    },
    "JSONWebKey": {
      "description": "It is important that this model object is named JSONWebKey for\n\"swagger generate spec\" to generate only on definition of a\nJSONWebKey.",
      "type": "object",
      "required": [
        "use",
        "kty",
        "kid",
        "alg"
      ],
      "properties": {
        "alg": {
          "description": "The \"alg\" (algorithm) parameter identifies the algorithm intended for\nuse with the key.  The values used should either be registered in the\nIANA \"JSON Web Signature and Encryption Algorithms\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.",
          "type": "string",
          "x-go-name": "Alg",
          "example": "RS256"
        },
        "crv": {
          "type": "string",
          "x-go-name": "Crv",
          "example": "P-256"
        },
        "d": {
          "type": "string",
          "x-go-name": "D",
          "example": "T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE"
        },
        "dp": {
          "type": "string",
          "x-go-name": "Dp",
          "example": "G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0"
        },
        "dq": {
          "type": "string",
          "x-go-name": "Dq",
          "example": "s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk"
        },
        "e": {
          "type": "string",
          "x-go-name": "E",
          "example": "AQAB"
        },
        "k": {
          "type": "string",
          "x-go-name": "K",
          "example": "GawgguFyGrWKav7AX4VKUg"
        },
        "kid": {
          "description": "The \"kid\" (key ID) parameter is used to match a specific key.  This\nis used, for instance, to choose among a set of keys within a JWK Set\nduring key rollover.  The structure of the \"kid\" value is\nunspecified.  When \"kid\" values are used within a JWK Set, different\nkeys within the JWK Set SHOULD use distinct \"kid\" values.  (One\nexample in which different keys might use the same \"kid\" value is if\nthey have different \"kty\" (key type) values but are considered to be\nequivalent alternatives by the application using them.)  The \"kid\"\nvalue is a case-sensitive string.",
          "type": "string",
          "x-go-name": "Kid",
          "example": "1603dfe0af8f4596"
        },
        "kty": {
          "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm\nfamily used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\neither be registered in the IANA \"JSON Web Key Types\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.  The \"kty\" value is a case-sensitive string.",
          "type": "string",
          "x-go-name": "Kty",
          "example": "RSA"
        },
        "n": {
          "type": "string",
          "x-go-name": "N",
          "example": "vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0"
        },
        "p": {
          "type": "string",
          "x-go-name": "P",
          "example": "6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ"
        },
        "q": {
          "type": "string",
          "x-go-name": "Q",
          "example": "0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ"
        },
        "qi": {
          "type": "string",
          "x-go-name": "Qi",
          "example": "GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU"
        },
        "use": {
          "description": "Use (\"public key use\") identifies the intended use of\nthe public key. The \"use\" parameter is employed to indicate whether\na public key is used for encrypting data or verifying the signature\non data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).",
          "type": "string",
          "x-go-name": "Use",
          "example": "sig"
        },
        "x": {
          "type": "string",
          "x-go-name": "X",
          "example": "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
        },
        "x5c": {
          "description": "The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\nor more PKIX certificates [RFC5280].  The certificate chain is\nrepresented as a JSON array of certificate value strings.  Each\nstring in the array is a base64-encoded (Section 4 of [RFC4648] --\nnot base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\nThe PKIX certificate containing the key value MUST be the first\ncertificate.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "X5c"
        },
        "y": {
          "type": "string",
          "x-go-name": "Y",
          "example": "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
        }
      },
      "x-go-package": "github.com/ory/hydra/x"
    },
    "JSONWebKeySet": {
      "description": "It is important that this model object is named JSONWebKeySet for\n\"swagger generate spec\" to generate only on definition of a\nJSONWebKeySet. Since one with the same name is previously defined as\nclient.Client.JSONWebKeys and this one is last, this one will be\neffectively written in the swagger spec.",
      "type": "object",
      "properties": {
        "keys": {
          "description": "The value of the \"keys\" parameter is an array of JWK values.  By\ndefault, the order of the JWK values within the array does not imply\nan order of preference among them, although applications of JWK Sets\ncan choose to assign a meaning to the order for their purposes, if\ndesired.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JSONWebKey"
          },
          "x-go-name": "Keys"
        }
      },
      "x-go-name": "swaggerJSONWebKeySet",
      "x-go-package": "github.com/ory/hydra/jwk"
    },
    "JoseJSONWebKeySet": {
      "type": "object",
      "x-go-package": "github.com/ory/hydra/x"
    },
    "PreviousConsentSession": {
      "description": "The response used to return used consent requests\nsame as HandledLoginRequest, just with consent_request exposed as json",
      "type": "object",
      "properties": {
        "consent_request": {
          "$ref": "#/definitions/consentRequest"
        },
        "grant_access_token_audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "grant_scope": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "handled_at": {
          "$ref": "#/definitions/nullTime"
        },
        "remember": {
          "description": "Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same\nclient asks the same user for the same, or a subset of, scope.",
          "type": "boolean",
          "x-go-name": "Remember"
        },
        "remember_for": {
          "description": "RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the\nauthorization will be remembered indefinitely.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RememberFor"
        },
        "session": {
          "$ref": "#/definitions/consentRequestSession"
        }
      },
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "StringSlicePipeDelimiter": {
      "type": "array",
      "title": "StringSlicePipeDelimiter de/encodes the string slice to/from a SQL string.",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/ory/x/sqlxx"
    },
    "acceptConsentRequest": {
      "type": "object",
      "title": "The request payload used to accept a consent request.",
      "properties": {
        "grant_access_token_audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "grant_scope": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "handled_at": {
          "$ref": "#/definitions/nullTime"
        },
        "remember": {
          "description": "Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same\nclient asks the same user for the same, or a subset of, scope.",
          "type": "boolean",
          "x-go-name": "Remember"
        },
        "remember_for": {
          "description": "RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the\nauthorization will be remembered indefinitely.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RememberFor"
        },
        "session": {
          "$ref": "#/definitions/consentRequestSession"
        }
      },
      "x-go-name": "HandledConsentRequest",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "acceptLoginRequest": {
      "type": "object",
      "title": "HandledLoginRequest is the request payload used to accept a login request.",
      "required": [
        "subject"
      ],
      "properties": {
        "acr": {
          "description": "ACR sets the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it\nto express that, for example, a user authenticated using two factor authentication.",
          "type": "string",
          "x-go-name": "ACR"
        },
        "context": {
          "$ref": "#/definitions/JSONRawMessage"
        },
        "force_subject_identifier": {
          "description": "ForceSubjectIdentifier forces the \"pairwise\" user ID of the end-user that authenticated. The \"pairwise\" user ID refers to the\n(Pairwise Identifier Algorithm)[http://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg] of the OpenID\nConnect specification. It allows you to set an obfuscated subject (\"user\") identifier that is unique to the client.\n\nPlease note that this changes the user ID on endpoint /userinfo and sub claim of the ID Token. It does not change the\nsub claim in the OAuth 2.0 Introspection.\n\nPer default, ORY Hydra handles this value with its own algorithm. In case you want to set this yourself\nyou can use this field. Please note that setting this field has no effect if `pairwise` is not configured in\nORY Hydra or the OAuth 2.0 Client does not expect a pairwise identifier (set via `subject_type` key in the client's\nconfiguration).\n\nPlease also be aware that ORY Hydra is unable to properly compute this value during authentication. This implies\nthat you have to compute this value on every authentication process (probably depending on the client ID or some\nother unique value).\n\nIf you fail to compute the proper value, then authentication processes which have id_token_hint set might fail.",
          "type": "string",
          "x-go-name": "ForceSubjectIdentifier"
        },
        "remember": {
          "description": "Remember, if set to true, tells ORY Hydra to remember this user by telling the user agent (browser) to store\na cookie with authentication data. If the same user performs another OAuth 2.0 Authorization Request, he/she\nwill not be asked to log in again.",
          "type": "boolean",
          "x-go-name": "Remember"
        },
        "remember_for": {
          "description": "RememberFor sets how long the authentication should be remembered for in seconds. If set to `0`, the\nauthorization will be remembered for the duration of the browser session (using a session cookie).",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RememberFor"
        },
        "subject": {
          "description": "Subject is the user ID of the end-user that authenticated.",
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-name": "HandledLoginRequest",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "consentRequest": {
      "type": "object",
      "title": "Contains information on an ongoing consent request.",
      "required": [
        "challenge"
      ],
      "properties": {
        "acr": {
          "description": "ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it\nto express that, for example, a user authenticated using two factor authentication.",
          "type": "string",
          "x-go-name": "ACR"
        },
        "challenge": {
          "description": "ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to\nidentify the session.",
          "type": "string",
          "x-go-name": "ID"
        },
        "client": {
          "$ref": "#/definitions/oAuth2Client"
        },
        "context": {
          "$ref": "#/definitions/JSONRawMessage"
        },
        "login_challenge": {
          "description": "LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate\na login and consent request in the login \u0026 consent app.",
          "type": "string",
          "x-go-name": "LoginChallenge"
        },
        "login_session_id": {
          "description": "LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag)\nthis ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false)\nthis will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back-\nchannel logout. It's value can generally be used to associate consecutive login requests by a certain user.",
          "type": "string",
          "x-go-name": "LoginSessionID"
        },
        "oidc_context": {
          "$ref": "#/definitions/openIDConnectContext"
        },
        "request_url": {
          "description": "RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which\ninitiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but\nmight come in handy if you want to deal with additional request parameters.",
          "type": "string",
          "x-go-name": "RequestURL"
        },
        "requested_access_token_audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "requested_scope": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "skip": {
          "description": "Skip, if true, implies that the client has requested the same scopes from the same user previously.\nIf true, you must not ask the user to grant the requested scopes. You must however either allow or deny the\nconsent request using the usual API call.",
          "type": "boolean",
          "x-go-name": "Skip"
        },
        "subject": {
          "description": "Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope\nrequested by the OAuth 2.0 client.",
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-name": "ConsentRequest",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "consentRequestSession": {
      "type": "object",
      "title": "Used to pass session data to a consent request.",
      "properties": {
        "access_token": {
          "description": "AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the\nrefresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection.\nIf only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties\ncan access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "AccessToken"
        },
        "id_token": {
          "description": "IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session'id payloads are readable\nby anyone that has access to the ID Challenge. Use with care!",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "IDToken"
        }
      },
      "x-go-name": "ConsentRequestSessionData",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "flushInactiveOAuth2TokensRequest": {
      "type": "object",
      "properties": {
        "notAfter": {
          "description": "NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history\nof recently issued tokens for auditing.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "NotAfter"
        }
      },
      "x-go-name": "FlushInactiveOAuth2TokensRequest",
      "x-go-package": "github.com/ory/hydra/oauth2"
    },
    "jsonWebKeySetGeneratorRequest": {
      "type": "object",
      "required": [
        "alg",
        "use",
        "kid"
      ],
      "properties": {
        "alg": {
          "description": "The algorithm to be used for creating the key. Supports \"RS256\", \"ES512\", \"HS512\", and \"HS256\"",
          "type": "string",
          "x-go-name": "Algorithm"
        },
        "kid": {
          "description": "The kid of the key to be created",
          "type": "string",
          "x-go-name": "KeyID"
        },
        "use": {
          "description": "The \"use\" (public key use) parameter identifies the intended use of\nthe public key. The \"use\" parameter is employed to indicate whether\na public key is used for encrypting data or verifying the signature\non data. Valid values are \"enc\" and \"sig\".",
          "type": "string",
          "x-go-name": "Use"
        }
      },
      "x-go-name": "createRequest",
      "x-go-package": "github.com/ory/hydra/jwk"
    },
    "nullTime": {
      "type": "string",
      "format": "date-time",
      "title": "NullTime implements sql.NullTime functionality.",
      "x-go-name": "NullTime",
      "x-go-package": "github.com/ory/x/sqlxx"
    },
    "oAuth2Client": {
      "type": "object",
      "title": "Client represents an OAuth 2.0 Client.",
      "properties": {
        "allowed_cors_origins": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "backchannel_logout_session_required": {
          "description": "Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout\nToken to identify the RP session with the OP when the backchannel_logout_uri is used.\nIf omitted, the default value is false.",
          "type": "boolean",
          "x-go-name": "BackChannelLogoutSessionRequired"
        },
        "backchannel_logout_uri": {
          "description": "RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.",
          "type": "string",
          "x-go-name": "BackChannelLogoutURI"
        },
        "client_id": {
          "description": "ID  is the id for this client.\nChanged validation for FUXI identity identifier, it must be a domain format now.",
          "type": "string",
          "x-go-name": "OutfacingID"
        },
        "client_name": {
          "description": "Name is the human-readable string name of the client to be presented to the\nend-user during authorization.",
          "type": "string",
          "x-go-name": "Name"
        },
        "client_secret": {
          "description": "Secret is the client's secret. The secret will be included in the create request as cleartext, and then\nnever again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users\nthat they need to write the secret down as it will not be made available again.",
          "type": "string",
          "x-go-name": "Secret"
        },
        "client_secret_expires_at": {
          "description": "SecretExpiresAt is an integer holding the time at which the client\nsecret will expire or 0 if it will not expire. The time is\nrepresented as the number of seconds from 1970-01-01T00:00:00Z as\nmeasured in UTC until the date/time of expiration.\n\nThis feature is currently not supported and it's value will always\nbe set to 0.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SecretExpiresAt"
        },
        "client_uri": {
          "description": "ClientURI is an URL string of a web page providing information about the client.\nIf present, the server SHOULD display this URL to the end-user in\na clickable fashion.",
          "type": "string",
          "x-go-name": "ClientURI"
        },
        "contacts": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "created_at": {
          "description": "CreatedAt returns the timestamp of the client's creation.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "frontchannel_logout_session_required": {
          "description": "Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be\nincluded to identify the RP session with the OP when the frontchannel_logout_uri is used.\nIf omitted, the default value is false.",
          "type": "boolean",
          "x-go-name": "FrontChannelLogoutSessionRequired"
        },
        "frontchannel_logout_uri": {
          "description": "RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query\nparameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the\nrequest and to determine which of the potentially multiple sessions is to be logged out; if either is\nincluded, both MUST be.",
          "type": "string",
          "x-go-name": "FrontChannelLogoutURI"
        },
        "grant_types": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "jwks": {
          "$ref": "#/definitions/JoseJSONWebKeySet"
        },
        "jwks_uri": {
          "description": "URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains\nthe signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the\nClient's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing\nand encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced\nJWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both\nsignatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used\nto provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST\nmatch those in the certificate.",
          "type": "string",
          "x-go-name": "JSONWebKeysURI"
        },
        "logo_uri": {
          "description": "LogoURI is an URL string that references a logo for the client.",
          "type": "string",
          "x-go-name": "LogoURI"
        },
        "metadata": {
          "$ref": "#/definitions/JSONRawMessage"
        },
        "owner": {
          "description": "Owner is a string identifying the owner of the OAuth 2.0 Client.\nUsed for FUXI identity identifier as email property.",
          "type": "string",
          "x-go-name": "Owner"
        },
        "policy_uri": {
          "description": "PolicyURI is a URL string that points to a human-readable privacy policy document\nthat describes how the deployment organization collects, uses,\nretains, and discloses personal data.",
          "type": "string",
          "x-go-name": "PolicyURI"
        },
        "post_logout_redirect_uris": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "publicKey": {
          "description": "New property for FUXI identity identifier",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "PublicKey"
        },
        "redirect_uris": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "request_object_signing_alg": {
          "description": "JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects\nfrom this Client MUST be rejected, if not signed with this algorithm.",
          "type": "string",
          "x-go-name": "RequestObjectSigningAlgorithm"
        },
        "request_uris": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "response_types": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "scope": {
          "description": "Scope is a string containing a space-separated list of scope values (as\ndescribed in Section 3.3 of OAuth 2.0 [RFC6749]) that the client\ncan use when requesting access tokens.",
          "type": "string",
          "pattern": "([a-zA-Z0-9\\.\\*]+\\s?)+",
          "x-go-name": "Scope"
        },
        "sector_identifier_uri": {
          "description": "URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a\nfile with a single JSON array of redirect_uri values.",
          "type": "string",
          "x-go-name": "SectorIdentifierURI"
        },
        "subject_type": {
          "description": "SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a\nlist of the supported subject_type values for this server. Valid types include `pairwise` and `public`.",
          "type": "string",
          "x-go-name": "SubjectType"
        },
        "token_endpoint_auth_method": {
          "description": "Requested Client Authentication method for the Token Endpoint. The options are client_secret_post,\nclient_secret_basic, private_key_jwt, and none.",
          "type": "string",
          "x-go-name": "TokenEndpointAuthMethod"
        },
        "token_endpoint_auth_signing_alg": {
          "description": "Requested Client Authentication signing algorithm for the Token Endpoint.",
          "type": "string",
          "x-go-name": "TokenEndpointAuthSigningAlgorithm"
        },
        "tos_uri": {
          "description": "TermsOfServiceURI is a URL string that points to a human-readable terms of service\ndocument for the client that describes a contractual relationship\nbetween the end-user and the client that the end-user accepts when\nauthorizing the client.",
          "type": "string",
          "x-go-name": "TermsOfServiceURI"
        },
        "updated_at": {
          "description": "UpdatedAt returns the timestamp of the last update.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "userinfo_signed_response_alg": {
          "description": "JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT\n[JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims\nas a UTF-8 encoded JSON object using the application/json content-type.",
          "type": "string",
          "x-go-name": "UserinfoSignedResponseAlg"
        }
      },
      "x-go-name": "Client",
      "x-go-package": "github.com/ory/hydra/client"
    },
    "openIDConnectContext": {
      "type": "object",
      "title": "Contains optional information about the OpenID Connect request.",
      "properties": {
        "acr_values": {
          "description": "ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request.\nIt is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.\n\nOpenID Connect defines it as follows:\n\u003e Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values\nthat the Authorization Server is being requested to use for processing this Authentication Request, with the\nvalues appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication\nperformed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a\nVoluntary Claim by this parameter.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ACRValues"
        },
        "display": {
          "description": "Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.\nThe defined values are:\npage: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode.\npopup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over.\ntouch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface.\nwap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.\n\nThe Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.",
          "type": "string",
          "x-go-name": "Display"
        },
        "id_token_hint_claims": {
          "description": "IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the\nEnd-User's current or past authenticated session with the Client.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "IDTokenHintClaims"
        },
        "login_hint": {
          "description": "LoginHint hints about the login identifier the End-User might use to log in (if necessary).\nThis hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier)\nand then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a\nphone number in the format specified for the phone_number Claim. The use of this parameter is optional.",
          "type": "string",
          "x-go-name": "LoginHint"
        },
        "ui_locales": {
          "description": "UILocales is the End-User'id preferred languages and scripts for the user interface, represented as a\nspace-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value\n\"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation),\nfollowed by English (without a region designation). An error SHOULD NOT result if some or all of the requested\nlocales are not supported by the OpenID Provider.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "UILocales"
        }
      },
      "x-go-name": "OpenIDConnectContext",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "patchDocument": {
      "description": "A JSONPatch document as defined by RFC 6902",
      "type": "object",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A JSON-pointer",
          "type": "string",
          "x-go-name": "From"
        },
        "op": {
          "description": "The operation to be performed",
          "type": "string",
          "x-go-name": "Op",
          "example": "\"replace\""
        },
        "path": {
          "description": "A JSON-pointer",
          "type": "string",
          "x-go-name": "Path",
          "example": "\"/name\""
        },
        "value": {
          "description": "The value to be used within the operations",
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/ory/hydra/client"
    },
    "patchRequest": {
      "description": "A JSONPatch request",
      "type": "array",
      "items": {
        "$ref": "#/definitions/patchDocument"
      },
      "x-go-package": "github.com/ory/hydra/client"
    },
    "rejectRequest": {
      "type": "object",
      "title": "The request payload used to accept a login or consent request.",
      "properties": {
        "error": {
          "description": "The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).\n\nDefaults to `request_denied`.",
          "type": "string",
          "x-go-name": "Name"
        },
        "error_debug": {
          "description": "Debug contains information to help resolve the problem as a developer. Usually not exposed\nto the public but only in the server logs.",
          "type": "string",
          "x-go-name": "Debug"
        },
        "error_description": {
          "description": "Description of the error in a human readable format.",
          "type": "string",
          "x-go-name": "Description"
        },
        "error_hint": {
          "description": "Hint to help resolve the error.",
          "type": "string",
          "x-go-name": "Hint"
        },
        "status_code": {
          "description": "Represents the HTTP status code of the error (e.g. 401 or 403)\n\nDefaults to 400",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        }
      },
      "x-go-name": "RequestDeniedError",
      "x-go-package": "github.com/ory/hydra/consent"
    }
  },
  "responses": {
    "emptyResponse": {
      "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
    },
    "handledConsentRequestList": {
      "description": "A list of used consent requests.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PreviousConsentSession"
        }
      }
    },
    "oAuth2ClientList": {
      "description": "A list of clients.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/oAuth2Client"
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://hydra.demo.ory.sh/oauth2/auth",
      "tokenUrl": "https://hydra.demo.ory.sh/oauth2/token",
      "scopes": {
        "offline": "A scope required when requesting refresh tokens (alias for `offline_access`)",
        "offline_access": "A scope required when requesting refresh tokens",
        "openid": "Request an OpenID Connect ID Token"
      }
    }
  },
  "x-forwarded-proto": "string",
  "x-request-id": "string"
}