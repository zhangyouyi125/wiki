{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.",
    "title": "ORY Hydra",
    "version": "latest"
  },
  "basePath": "/",
  "paths": {
    "/clients": {
      "get": {
        "description": "This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.\nThe \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '\u003chttps://hydra-url/admin/clients?limit={limit}\u0026offset={offset}\u003e; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.\nMultiple links can be included in this header, and will be separated by a comma.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "List OAuth 2.0 Clients",
        "operationId": "listOAuth2Clients",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "The maximum amount of clients to returned, upper bound is 500 clients.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset",
            "description": "The offset from where to start looking.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name of the clients to filter by.",
            "name": "client_name",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Owner",
            "description": "The owner of the clients to filter by.",
            "name": "owner",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/oAuth2ClientList"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "post": {
        "description": "Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Create an OAuth 2.0 Client",
        "operationId": "createOAuth2Client",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "409": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/clients/{id}": {
      "get": {
        "description": "Get an OAUth 2.0 client by its ID. This endpoint never returns passwords.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get an OAuth 2.0 Client.",
        "operationId": "getOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "The id of the OAuth 2.0 Client.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "put": {
        "description": "Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Update an OAuth 2.0 Client",
        "operationId": "updateOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "delete": {
        "description": "Delete an existing OAuth 2.0 Client by its ID.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Deletes an OAuth 2.0 Client",
        "operationId": "deleteOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "description": "The id of the OAuth 2.0 Client.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "patch": {
        "description": "Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Patch an OAuth 2.0 Client",
        "operationId": "patchOAuth2Client",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "oAuth2Client",
            "schema": {
              "$ref": "#/definitions/oAuth2Client"
            }
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/identifier": {
      "get": {
        "description": "List all the data identifiers with the client_id.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "dataIdentifier"
        ],
        "summary": "List all the data identifiers",
        "operationId": "listDataIdentifiers",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ClientId",
            "name": "client_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Tag",
            "name": "tag",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Metadata",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListIdentifiersResp"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "post": {
        "description": "Create a new data identifier if you have the valid license(apiKey). The privateKey and publicKey are returned in response.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "dataIdentifier"
        ],
        "summary": "Create a data identifier",
        "operationId": "createDataIdentifier",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DataIdentifierResp"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "403": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/identifier/{id}": {
      "get": {
        "description": "Delete the data identifier with the identifierID.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "dataIdentifier"
        ],
        "summary": "Delete a data identifier",
        "operationId": "dataIdentifierID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/jsonError"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "delete": {
        "description": "Delete the data identifier with the identifierID.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "dataIdentifier"
        ],
        "summary": "Delete a data identifier",
        "operationId": "dataIdentifierID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/jsonError"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/identity": {
      "get": {
        "description": "List the identities owned by the client which ID is client_id in request.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "identity"
        ],
        "summary": "List all the identities",
        "operationId": "listIdentities",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "ClientId",
            "description": "The clientID",
            "name": "client_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListIdentityResp"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "post": {
        "description": "Create a new Identity if you have the valid license(apiKey). The privateKey and publicKey are returned in response.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "identity"
        ],
        "summary": "Create a Identity",
        "operationId": "createIdentity",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Authorization": {
                  "type": "string",
                  "x-go-name": "Apikey"
                },
                "email": {
                  "type": "string",
                  "x-go-name": "Email"
                },
                "id": {
                  "type": "string",
                  "x-go-name": "Id"
                },
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                },
                "owner": {
                  "type": "string",
                  "x-go-name": "Owner"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IdentityResp"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "401": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "429": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/identity/{id}": {
      "delete": {
        "description": "Dlete the identity with the identity ID.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "identity"
        ],
        "summary": "Delete the identity",
        "operationId": "deleteIdentity",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "description": "The identity ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The apiKey",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "Authorization": {
                  "type": "string",
                  "x-go-name": "Apikey"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/jsonError"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/identity{id}": {
      "get": {
        "description": "Get the identity information by querying the identity ID.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "identity"
        ],
        "summary": "Get the identities",
        "operationId": "getIdentity",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "description": "The identity ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/IdentityResp"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/subscriptions": {
      "post": {
        "description": "Create a new data identifier subscription if you have the valid license(apiKey). The privateKey and publicKey are returned in response.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "subscription"
        ],
        "summary": "Create a data identifier subscription",
        "operationId": "createSubscription",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Authorization": {
                  "type": "string",
                  "x-go-name": "Apikey"
                },
                "identifier": {
                  "type": "string",
                  "x-go-name": "Identifier"
                },
                "recipient": {
                  "type": "string",
                  "x-go-name": "Recipient"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/subscriptionResp"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "description": "Get the data identifier subscription with the subscriptionID.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "subscription"
        ],
        "summary": "Get the data identifier subscription",
        "operationId": "dataSubscriptionID",
        "responses": {
          "200": {
            "$ref": "#/responses/subscriptionResp"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "delete": {
        "description": "Delete the data identifier subscription with the subscriptionID.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "subscription"
        ],
        "summary": "Delete the data identifier subscription",
        "operationId": "dataSubscriptionID",
        "responses": {
          "200": {
            "$ref": "#/responses/jsonError"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      },
      "patch": {
        "description": "Audit the data identifier subscription with the subscriptionID.",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "subscription"
        ],
        "summary": "Audit the data identifier subscription",
        "operationId": "auditSubscription",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "x-go-name": "Status"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/subscriptionResp"
          },
          "400": {
            "$ref": "#/responses/jsonError"
          },
          "404": {
            "$ref": "#/responses/jsonError"
          },
          "500": {
            "$ref": "#/responses/jsonError"
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This endpoint returns the service version typically notated using semantic versioning.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admin"
        ],
        "summary": "Get Service Version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "$ref": "#/responses/version"
          }
        }
      }
    }
  },
  "definitions": {
    "Identifier": {
      "type": "object",
      "properties": {
        "authAddress": {
          "type": "string",
          "x-go-name": "AuthAddress"
        },
        "categoryID": {
          "type": "string",
          "x-go-name": "CategoryID"
        },
        "dataAddress": {
          "type": "string",
          "x-go-name": "DataAddress"
        },
        "dataDigest": {
          "type": "string",
          "x-go-name": "DataDigest"
        },
        "dataSignature": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "DataSignature"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Metadata"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "subscriptionType": {
          "$ref": "#/definitions/SubscriptionType"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/ory/hydra/identifier"
    },
    "Identity": {
      "type": "object",
      "properties": {
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreationTime"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "lastModifiedTime": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastModifiedTime"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "privateKey": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "PrivateKey"
        },
        "publicKey": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "PublicKey"
        }
      },
      "x-go-package": "github.com/ory/hydra/identity"
    },
    "JSONRawMessage": {
      "type": "object",
      "title": "JSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger.",
      "x-go-package": "github.com/ory/x/sqlxx"
    },
    "JSONWebKey": {
      "description": "It is important that this model object is named JSONWebKey for\n\"swagger generate spec\" to generate only on definition of a\nJSONWebKey.",
      "type": "object",
      "required": [
        "use",
        "kty",
        "kid",
        "alg"
      ],
      "properties": {
        "alg": {
          "description": "The \"alg\" (algorithm) parameter identifies the algorithm intended for\nuse with the key.  The values used should either be registered in the\nIANA \"JSON Web Signature and Encryption Algorithms\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.",
          "type": "string",
          "x-go-name": "Alg",
          "example": "RS256"
        },
        "crv": {
          "type": "string",
          "x-go-name": "Crv",
          "example": "P-256"
        },
        "d": {
          "type": "string",
          "x-go-name": "D",
          "example": "T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE"
        },
        "dp": {
          "type": "string",
          "x-go-name": "Dp",
          "example": "G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0"
        },
        "dq": {
          "type": "string",
          "x-go-name": "Dq",
          "example": "s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk"
        },
        "e": {
          "type": "string",
          "x-go-name": "E",
          "example": "AQAB"
        },
        "k": {
          "type": "string",
          "x-go-name": "K",
          "example": "GawgguFyGrWKav7AX4VKUg"
        },
        "kid": {
          "description": "The \"kid\" (key ID) parameter is used to match a specific key.  This\nis used, for instance, to choose among a set of keys within a JWK Set\nduring key rollover.  The structure of the \"kid\" value is\nunspecified.  When \"kid\" values are used within a JWK Set, different\nkeys within the JWK Set SHOULD use distinct \"kid\" values.  (One\nexample in which different keys might use the same \"kid\" value is if\nthey have different \"kty\" (key type) values but are considered to be\nequivalent alternatives by the application using them.)  The \"kid\"\nvalue is a case-sensitive string.",
          "type": "string",
          "x-go-name": "Kid",
          "example": "1603dfe0af8f4596"
        },
        "kty": {
          "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm\nfamily used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\neither be registered in the IANA \"JSON Web Key Types\" registry\nestablished by [JWA] or be a value that contains a Collision-\nResistant Name.  The \"kty\" value is a case-sensitive string.",
          "type": "string",
          "x-go-name": "Kty",
          "example": "RSA"
        },
        "n": {
          "type": "string",
          "x-go-name": "N",
          "example": "vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0"
        },
        "p": {
          "type": "string",
          "x-go-name": "P",
          "example": "6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ"
        },
        "q": {
          "type": "string",
          "x-go-name": "Q",
          "example": "0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ"
        },
        "qi": {
          "type": "string",
          "x-go-name": "Qi",
          "example": "GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU"
        },
        "use": {
          "description": "Use (\"public key use\") identifies the intended use of\nthe public key. The \"use\" parameter is employed to indicate whether\na public key is used for encrypting data or verifying the signature\non data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).",
          "type": "string",
          "x-go-name": "Use",
          "example": "sig"
        },
        "x": {
          "type": "string",
          "x-go-name": "X",
          "example": "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU"
        },
        "x5c": {
          "description": "The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\nor more PKIX certificates [RFC5280].  The certificate chain is\nrepresented as a JSON array of certificate value strings.  Each\nstring in the array is a base64-encoded (Section 4 of [RFC4648] --\nnot base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\nThe PKIX certificate containing the key value MUST be the first\ncertificate.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "X5c"
        },
        "y": {
          "type": "string",
          "x-go-name": "Y",
          "example": "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0"
        }
      },
      "x-go-package": "github.com/ory/hydra/x"
    },
    "JSONWebKeySet": {
      "description": "It is important that this model object is named JSONWebKeySet for\n\"swagger generate spec\" to generate only on definition of a\nJSONWebKeySet. Since one with the same name is previously defined as\nclient.Client.JSONWebKeys and this one is last, this one will be\neffectively written in the swagger spec.",
      "type": "object",
      "properties": {
        "keys": {
          "description": "The value of the \"keys\" parameter is an array of JWK values.  By\ndefault, the order of the JWK values within the array does not imply\nan order of preference among them, although applications of JWK Sets\ncan choose to assign a meaning to the order for their purposes, if\ndesired.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JSONWebKey"
          },
          "x-go-name": "Keys"
        }
      },
      "x-go-name": "swaggerJSONWebKeySet",
      "x-go-package": "github.com/ory/hydra/jwk"
    },
    "JoseJSONWebKeySet": {
      "type": "object",
      "x-go-package": "github.com/ory/hydra/x"
    },
    "Metadata": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/ory/hydra/subscription"
    },
    "PreviousConsentSession": {
      "description": "The response used to return used consent requests\nsame as HandledLoginRequest, just with consent_request exposed as json",
      "type": "object",
      "properties": {
        "consent_request": {
          "$ref": "#/definitions/consentRequest"
        },
        "grant_access_token_audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "grant_scope": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "handled_at": {
          "$ref": "#/definitions/nullTime"
        },
        "remember": {
          "description": "Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same\nclient asks the same user for the same, or a subset of, scope.",
          "type": "boolean",
          "x-go-name": "Remember"
        },
        "remember_for": {
          "description": "RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the\nauthorization will be remembered indefinitely.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RememberFor"
        },
        "session": {
          "$ref": "#/definitions/consentRequestSession"
        }
      },
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "StringSlicePipeDelimiter": {
      "type": "array",
      "title": "StringSlicePipeDelimiter de/encodes the string slice to/from a SQL string.",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/ory/x/sqlxx"
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "expired_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiredAt"
        },
        "id": {
          "description": "Hash(Requestor+Target+Owner).Target",
          "type": "string",
          "x-go-name": "ID"
        },
        "identifier": {
          "type": "string",
          "x-go-name": "Identifier"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "modified_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ModifiedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "recipient": {
          "type": "string",
          "x-go-name": "Recipient"
        },
        "requestor": {
          "type": "string",
          "x-go-name": "Requestor"
        },
        "status": {
          "$ref": "#/definitions/SubscriptionStatus"
        },
        "type": {
          "$ref": "#/definitions/SubscriptionType"
        }
      },
      "x-go-package": "github.com/ory/hydra/subscription"
    },
    "SubscriptionStatus": {
      "type": "string",
      "x-go-package": "github.com/ory/hydra/subscription"
    },
    "SubscriptionType": {
      "type": "string",
      "x-go-package": "github.com/ory/hydra/subscription"
    },
    "acceptConsentRequest": {
      "type": "object",
      "title": "The request payload used to accept a consent request.",
      "properties": {
        "grant_access_token_audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "grant_scope": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "handled_at": {
          "$ref": "#/definitions/nullTime"
        },
        "remember": {
          "description": "Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same\nclient asks the same user for the same, or a subset of, scope.",
          "type": "boolean",
          "x-go-name": "Remember"
        },
        "remember_for": {
          "description": "RememberFor sets how long the consent authorization should be remembered for in seconds. If set to `0`, the\nauthorization will be remembered indefinitely.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RememberFor"
        },
        "session": {
          "$ref": "#/definitions/consentRequestSession"
        }
      },
      "x-go-name": "HandledConsentRequest",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "acceptLoginRequest": {
      "type": "object",
      "title": "HandledLoginRequest is the request payload used to accept a login request.",
      "required": [
        "subject"
      ],
      "properties": {
        "acr": {
          "description": "ACR sets the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it\nto express that, for example, a user authenticated using two factor authentication.",
          "type": "string",
          "x-go-name": "ACR"
        },
        "context": {
          "$ref": "#/definitions/JSONRawMessage"
        },
        "force_subject_identifier": {
          "description": "ForceSubjectIdentifier forces the \"pairwise\" user ID of the end-user that authenticated. The \"pairwise\" user ID refers to the\n(Pairwise Identifier Algorithm)[http://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg] of the OpenID\nConnect specification. It allows you to set an obfuscated subject (\"user\") identifier that is unique to the client.\n\nPlease note that this changes the user ID on endpoint /userinfo and sub claim of the ID Token. It does not change the\nsub claim in the OAuth 2.0 Introspection.\n\nPer default, ORY Hydra handles this value with its own algorithm. In case you want to set this yourself\nyou can use this field. Please note that setting this field has no effect if `pairwise` is not configured in\nORY Hydra or the OAuth 2.0 Client does not expect a pairwise identifier (set via `subject_type` key in the client's\nconfiguration).\n\nPlease also be aware that ORY Hydra is unable to properly compute this value during authentication. This implies\nthat you have to compute this value on every authentication process (probably depending on the client ID or some\nother unique value).\n\nIf you fail to compute the proper value, then authentication processes which have id_token_hint set might fail.",
          "type": "string",
          "x-go-name": "ForceSubjectIdentifier"
        },
        "remember": {
          "description": "Remember, if set to true, tells ORY Hydra to remember this user by telling the user agent (browser) to store\na cookie with authentication data. If the same user performs another OAuth 2.0 Authorization Request, he/she\nwill not be asked to log in again.",
          "type": "boolean",
          "x-go-name": "Remember"
        },
        "remember_for": {
          "description": "RememberFor sets how long the authentication should be remembered for in seconds. If set to `0`, the\nauthorization will be remembered for the duration of the browser session (using a session cookie).",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RememberFor"
        },
        "subject": {
          "description": "Subject is the user ID of the end-user that authenticated.",
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-name": "HandledLoginRequest",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "consentRequest": {
      "type": "object",
      "title": "Contains information on an ongoing consent request.",
      "required": [
        "challenge"
      ],
      "properties": {
        "acr": {
          "description": "ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it\nto express that, for example, a user authenticated using two factor authentication.",
          "type": "string",
          "x-go-name": "ACR"
        },
        "challenge": {
          "description": "ID is the identifier (\"authorization challenge\") of the consent authorization request. It is used to\nidentify the session.",
          "type": "string",
          "x-go-name": "ID"
        },
        "client": {
          "$ref": "#/definitions/oAuth2Client"
        },
        "context": {
          "$ref": "#/definitions/JSONRawMessage"
        },
        "login_challenge": {
          "description": "LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate\na login and consent request in the login \u0026 consent app.",
          "type": "string",
          "x-go-name": "LoginChallenge"
        },
        "login_session_id": {
          "description": "LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag)\nthis ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false)\nthis will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back-\nchannel logout. It's value can generally be used to associate consecutive login requests by a certain user.",
          "type": "string",
          "x-go-name": "LoginSessionID"
        },
        "oidc_context": {
          "$ref": "#/definitions/openIDConnectContext"
        },
        "request_url": {
          "description": "RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which\ninitiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but\nmight come in handy if you want to deal with additional request parameters.",
          "type": "string",
          "x-go-name": "RequestURL"
        },
        "requested_access_token_audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "requested_scope": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "skip": {
          "description": "Skip, if true, implies that the client has requested the same scopes from the same user previously.\nIf true, you must not ask the user to grant the requested scopes. You must however either allow or deny the\nconsent request using the usual API call.",
          "type": "boolean",
          "x-go-name": "Skip"
        },
        "subject": {
          "description": "Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope\nrequested by the OAuth 2.0 client.",
          "type": "string",
          "x-go-name": "Subject"
        }
      },
      "x-go-name": "ConsentRequest",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "consentRequestSession": {
      "type": "object",
      "title": "Used to pass session data to a consent request.",
      "properties": {
        "access_token": {
          "description": "AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the\nrefresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection.\nIf only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties\ncan access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "AccessToken"
        },
        "id_token": {
          "description": "IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session'id payloads are readable\nby anyone that has access to the ID Challenge. Use with care!",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "IDToken"
        }
      },
      "x-go-name": "ConsentRequestSessionData",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "flushInactiveOAuth2TokensRequest": {
      "type": "object",
      "properties": {
        "notAfter": {
          "description": "NotAfter sets after which point tokens should not be flushed. This is useful when you want to keep a history\nof recently issued tokens for auditing.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "NotAfter"
        }
      },
      "x-go-name": "FlushInactiveOAuth2TokensRequest",
      "x-go-package": "github.com/ory/hydra/oauth2"
    },
    "jsonWebKeySetGeneratorRequest": {
      "type": "object",
      "required": [
        "alg",
        "use",
        "kid"
      ],
      "properties": {
        "alg": {
          "description": "The algorithm to be used for creating the key. Supports \"RS256\", \"ES512\", \"HS512\", and \"HS256\"",
          "type": "string",
          "x-go-name": "Algorithm"
        },
        "kid": {
          "description": "The kid of the key to be created",
          "type": "string",
          "x-go-name": "KeyID"
        },
        "use": {
          "description": "The \"use\" (public key use) parameter identifies the intended use of\nthe public key. The \"use\" parameter is employed to indicate whether\na public key is used for encrypting data or verifying the signature\non data. Valid values are \"enc\" and \"sig\".",
          "type": "string",
          "x-go-name": "Use"
        }
      },
      "x-go-name": "createRequest",
      "x-go-package": "github.com/ory/hydra/jwk"
    },
    "nullTime": {
      "type": "string",
      "format": "date-time",
      "title": "NullTime implements sql.NullTime functionality.",
      "x-go-name": "NullTime",
      "x-go-package": "github.com/ory/x/sqlxx"
    },
    "oAuth2Client": {
      "type": "object",
      "title": "Client represents an OAuth 2.0 Client.",
      "properties": {
        "allowed_cors_origins": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "audience": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "backchannel_logout_session_required": {
          "description": "Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout\nToken to identify the RP session with the OP when the backchannel_logout_uri is used.\nIf omitted, the default value is false.",
          "type": "boolean",
          "x-go-name": "BackChannelLogoutSessionRequired"
        },
        "backchannel_logout_uri": {
          "description": "RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.",
          "type": "string",
          "x-go-name": "BackChannelLogoutURI"
        },
        "client_id": {
          "description": "ID  is the id for this client.\nChanged validation for FUXI identity identifier, it must be a domain format now.",
          "type": "string",
          "x-go-name": "OutfacingID"
        },
        "client_name": {
          "description": "Name is the human-readable string name of the client to be presented to the\nend-user during authorization.",
          "type": "string",
          "x-go-name": "Name"
        },
        "client_secret": {
          "description": "Secret is the client's secret. The secret will be included in the create request as cleartext, and then\nnever again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users\nthat they need to write the secret down as it will not be made available again.",
          "type": "string",
          "x-go-name": "Secret"
        },
        "client_secret_expires_at": {
          "description": "SecretExpiresAt is an integer holding the time at which the client\nsecret will expire or 0 if it will not expire. The time is\nrepresented as the number of seconds from 1970-01-01T00:00:00Z as\nmeasured in UTC until the date/time of expiration.\n\nThis feature is currently not supported and it's value will always\nbe set to 0.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SecretExpiresAt"
        },
        "client_uri": {
          "description": "ClientURI is an URL string of a web page providing information about the client.\nIf present, the server SHOULD display this URL to the end-user in\na clickable fashion.",
          "type": "string",
          "x-go-name": "ClientURI"
        },
        "contacts": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "created_at": {
          "description": "CreatedAt returns the timestamp of the client's creation.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "email": {
          "description": "The following properties were defined by the FUXI Inc.",
          "type": "string",
          "x-go-name": "Email"
        },
        "frontchannel_logout_session_required": {
          "description": "Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be\nincluded to identify the RP session with the OP when the frontchannel_logout_uri is used.\nIf omitted, the default value is false.",
          "type": "boolean",
          "x-go-name": "FrontChannelLogoutSessionRequired"
        },
        "frontchannel_logout_uri": {
          "description": "RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query\nparameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the\nrequest and to determine which of the potentially multiple sessions is to be logged out; if either is\nincluded, both MUST be.",
          "type": "string",
          "x-go-name": "FrontChannelLogoutURI"
        },
        "grant_types": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "jwks": {
          "$ref": "#/definitions/JoseJSONWebKeySet"
        },
        "jwks_uri": {
          "description": "URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains\nthe signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the\nClient's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing\nand encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced\nJWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both\nsignatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used\nto provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST\nmatch those in the certificate.",
          "type": "string",
          "x-go-name": "JSONWebKeysURI"
        },
        "logo_uri": {
          "description": "LogoURI is an URL string that references a logo for the client.",
          "type": "string",
          "x-go-name": "LogoURI"
        },
        "metadata": {
          "$ref": "#/definitions/JSONRawMessage"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "organization": {
          "type": "string",
          "x-go-name": "Organization"
        },
        "owner": {
          "description": "Owner is a string identifying the owner of the OAuth 2.0 Client.",
          "type": "string",
          "x-go-name": "Owner"
        },
        "policy_uri": {
          "description": "PolicyURI is a URL string that points to a human-readable privacy policy document\nthat describes how the deployment organization collects, uses,\nretains, and discloses personal data.",
          "type": "string",
          "x-go-name": "PolicyURI"
        },
        "post_logout_redirect_uris": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "redirect_uris": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "request_object_signing_alg": {
          "description": "JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects\nfrom this Client MUST be rejected, if not signed with this algorithm.",
          "type": "string",
          "x-go-name": "RequestObjectSigningAlgorithm"
        },
        "request_uris": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "response_types": {
          "$ref": "#/definitions/StringSlicePipeDelimiter"
        },
        "scope": {
          "description": "Scope is a string containing a space-separated list of scope values (as\ndescribed in Section 3.3 of OAuth 2.0 [RFC6749]) that the client\ncan use when requesting access tokens.",
          "type": "string",
          "pattern": "([a-zA-Z0-9\\.\\*]+\\s?)+",
          "x-go-name": "Scope"
        },
        "sector_identifier_uri": {
          "description": "URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a\nfile with a single JSON array of redirect_uri values.",
          "type": "string",
          "x-go-name": "SectorIdentifierURI"
        },
        "subject_type": {
          "description": "SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a\nlist of the supported subject_type values for this server. Valid types include `pairwise` and `public`.",
          "type": "string",
          "x-go-name": "SubjectType"
        },
        "token_endpoint_auth_method": {
          "description": "Requested Client Authentication method for the Token Endpoint. The options are client_secret_post,\nclient_secret_basic, private_key_jwt, and none.",
          "type": "string",
          "x-go-name": "TokenEndpointAuthMethod"
        },
        "token_endpoint_auth_signing_alg": {
          "description": "Requested Client Authentication signing algorithm for the Token Endpoint.",
          "type": "string",
          "x-go-name": "TokenEndpointAuthSigningAlgorithm"
        },
        "tos_uri": {
          "description": "TermsOfServiceURI is a URL string that points to a human-readable terms of service\ndocument for the client that describes a contractual relationship\nbetween the end-user and the client that the end-user accepts when\nauthorizing the client.",
          "type": "string",
          "x-go-name": "TermsOfServiceURI"
        },
        "updated_at": {
          "description": "UpdatedAt returns the timestamp of the last update.",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "userinfo_signed_response_alg": {
          "description": "JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT\n[JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims\nas a UTF-8 encoded JSON object using the application/json content-type.",
          "type": "string",
          "x-go-name": "UserinfoSignedResponseAlg"
        }
      },
      "x-go-name": "Client",
      "x-go-package": "github.com/ory/hydra/client"
    },
    "openIDConnectContext": {
      "type": "object",
      "title": "Contains optional information about the OpenID Connect request.",
      "properties": {
        "acr_values": {
          "description": "ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request.\nIt is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.\n\nOpenID Connect defines it as follows:\n\u003e Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values\nthat the Authorization Server is being requested to use for processing this Authentication Request, with the\nvalues appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication\nperformed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a\nVoluntary Claim by this parameter.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ACRValues"
        },
        "display": {
          "description": "Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.\nThe defined values are:\npage: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode.\npopup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over.\ntouch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface.\nwap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.\n\nThe Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.",
          "type": "string",
          "x-go-name": "Display"
        },
        "id_token_hint_claims": {
          "description": "IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the\nEnd-User's current or past authenticated session with the Client.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "IDTokenHintClaims"
        },
        "login_hint": {
          "description": "LoginHint hints about the login identifier the End-User might use to log in (if necessary).\nThis hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier)\nand then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a\nphone number in the format specified for the phone_number Claim. The use of this parameter is optional.",
          "type": "string",
          "x-go-name": "LoginHint"
        },
        "ui_locales": {
          "description": "UILocales is the End-User'id preferred languages and scripts for the user interface, represented as a\nspace-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value\n\"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation),\nfollowed by English (without a region designation). An error SHOULD NOT result if some or all of the requested\nlocales are not supported by the OpenID Provider.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "UILocales"
        }
      },
      "x-go-name": "OpenIDConnectContext",
      "x-go-package": "github.com/ory/hydra/consent"
    },
    "patchDocument": {
      "description": "A JSONPatch document as defined by RFC 6902",
      "type": "object",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A JSON-pointer",
          "type": "string",
          "x-go-name": "From"
        },
        "op": {
          "description": "The operation to be performed",
          "type": "string",
          "x-go-name": "Op",
          "example": "\"replace\""
        },
        "path": {
          "description": "A JSON-pointer",
          "type": "string",
          "x-go-name": "Path",
          "example": "\"/name\""
        },
        "value": {
          "description": "The value to be used within the operations",
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/ory/hydra/client"
    },
    "patchRequest": {
      "description": "A JSONPatch request",
      "type": "array",
      "items": {
        "$ref": "#/definitions/patchDocument"
      },
      "x-go-package": "github.com/ory/hydra/client"
    },
    "rejectRequest": {
      "type": "object",
      "title": "The request payload used to accept a login or consent request.",
      "properties": {
        "error": {
          "description": "The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).\n\nDefaults to `request_denied`.",
          "type": "string",
          "x-go-name": "Name"
        },
        "error_debug": {
          "description": "Debug contains information to help resolve the problem as a developer. Usually not exposed\nto the public but only in the server logs.",
          "type": "string",
          "x-go-name": "Debug"
        },
        "error_description": {
          "description": "Description of the error in a human readable format.",
          "type": "string",
          "x-go-name": "Description"
        },
        "error_hint": {
          "description": "Hint to help resolve the error.",
          "type": "string",
          "x-go-name": "Hint"
        },
        "status_code": {
          "description": "Represents the HTTP status code of the error (e.g. 401 or 403)\n\nDefaults to 400",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        }
      },
      "x-go-name": "RequestDeniedError",
      "x-go-package": "github.com/ory/hydra/consent"
    }
  },
  "responses": {
    "DataIdentifierResp": {
      "description": "Data identifier information response are sent when the operation succeeds.",
      "schema": {
        "$ref": "#/definitions/Identifier"
      }
    },
    "IdentityResp": {
      "description": "Identity information response are sent when the operation succeeds.",
      "schema": {
        "$ref": "#/definitions/Identity"
      }
    },
    "ListIdentityResp": {
      "description": "List all the Identities information with the given clientID.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Identity"
        }
      }
    },
    "emptyResponse": {
      "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201."
    },
    "handledConsentRequestList": {
      "description": "A list of used consent requests.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PreviousConsentSession"
        }
      }
    },
    "oAuth2ClientList": {
      "description": "A list of clients.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/oAuth2Client"
        }
      }
    },
    "subscriptionResp": {
      "description": "Subscription information response are sent when the operation succeeds.",
      "schema": {
        "$ref": "#/definitions/Subscription"
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://hydra.demo.ory.sh/oauth2/auth",
      "tokenUrl": "https://hydra.demo.ory.sh/oauth2/token",
      "scopes": {
        "offline": "A scope required when requesting refresh tokens (alias for `offline_access`)",
        "offline_access": "A scope required when requesting refresh tokens",
        "openid": "Request an OpenID Connect ID Token"
      }
    }
  },
  "x-forwarded-proto": "string",
  "x-request-id": "string"
}